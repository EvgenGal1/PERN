// миксин - комплект свойств, с разными префиксами(для разных браузеров), в которые можно передаватть переменные (МНОГО mixinов удалил за невостребованостью)

// ^ отдел.подкл.перем. после подкл.ч/з @use с указ.пространства имён vars
@use "./variables" as vars;
// раб.с картами
@use "sass:map";

// ФриПоЖизн ==================================================================================
// АДАПТИВНЫЕ СВОЙСТВА ----------------------------------------------------------------------------------
// Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src:
      url("../fonts/#{$file_name}.woff2") format("woff2"),
      url("../fonts/#{$file_name}.woff") format("woff");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}
// Размер в одну строку. @include size(80px, 50px);
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
// Адаптивный шрифт. @include adaptiv-font(24, 12);
@mixin adaptiv-font($pcSize, $mobSize) {
  font-size: calc(
    #{$mobSize}px + (#{$pcSize} - #{$mobSize}) *
      ((100vw - 320px) / #{vars.$maxWidth - 320})
  );
}

//  Vedeev ===================================================================================
// px в rem. перемен. $mainFontSize из vars.scss делит на переданые px превращ в rem и адаптирует под экран с помощью @media из main.scss(font-size: rem(20);)
@function rem($pixels, $context: $mainFontSize) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return math($pixels, $context * 1);
}

//  СВОЁ ===================================================================================

// Адаптивное свойство(сво-во, нач,сер,конеч значн). @include adaptiv-val("padding-right", 32, 15);
@mixin adaptiv-val($property, $startSize, $minSize) {
  #{$property}: calc(
    #{$minSize}px + (#{$startSize} - #{$minSize}) *
      ((100vw - 320px) / #{vars.$maxWidth - 320})
  );
}

// Адаптивное свойство для неск значений. @include adaptiv-value-all("padding", 10, 5, 30, 10, 60, 25);
// 1ое - сво-во, две первые цифры - начальное и конечное значение для верхн.парам., 2е по середине - нач./конеч.знач. для горинт.парам, 2е послед.цифры - нач./конеч.знач. для низа
@mixin adaptiv-value-all(
  $property,
  $startSizeH,
  $minSizeH,
  $startSizeW,
  $minSizeW,
  $startSizeHBott,
  $minSizeHBott
) {
  // @if $type==1 {
  $addSizeHTop: $startSizeH - $minSizeH;
  $addSizeW: $startSizeW - $minSizeW;
  $addSizeHBott: $startSizeHBott - $minSizeHBott;

  #{$property}-top: calc(
    #{$minSizeH}px + #{$addSizeHTop} *
      ((100vw - 320px) / #{vars.$maxWidth - 320})
  );
  #{$property}-bottom: calc(
    #{$minSizeHBott}px + #{$addSizeHBott} *
      ((100vw - 320px) / #{vars.$maxWidth - 320})
  );
  #{$property}-left: calc(
    #{$minSizeW}px + #{$addSizeW} * ((100vw - 320px) / #{vars.$maxWidth - 320})
  );
  #{$property}-right: calc(
    #{$minSizeW}px + #{$addSizeW} * ((100vw - 320px) / #{vars.$maxWidth - 320})
  );
  // ??? не раб - попытка неск. условий в ошб. -  @if $startSizeHBott {} @else {} - отсутствует аргументы
}

// цв.шаблон + актив/наведение
@mixin color-scheme(
  $bg-color,
  $hover-bg-color,
  $border-color,
  $hover-border-color,
  $text-color,
  $hover-text-color
) {
  border-color: $border-color;
  background-color: $bg-color;
  color: $text-color;
  &:hover,
  &.active {
    border-color: $hover-border-color;
    background-color: $hover-bg-color;
    color: $hover-text-color;
  }
}
// карта цв.схем
$color-schemes: (
  primary: (
    bg: var(--Blue_1),
    hover-bg: var(--Blue_2),
    border: var(--BlackAmber),
    hover-border: var(--BlackBrown),
    text: var(--DeepYellow),
    hover-text: var(--MelonYellow),
  ),
  success: (
    bg: var(--Green_1),
    hover-bg: var(--Green_2),
    border: var(--BlackAmber),
    hover-border: var(--BlackBrown),
    text: var(--DeepYellow),
    hover-text: var(--MelonYellow),
  ),
  danger: (
    bg: var(--CrimsonBrown),
    hover-bg: var(--PinkForest),
    border: var(--BlackAmber),
    hover-border: var(--BlackBrown),
    text: var(--DeepYellow),
    hover-text: var(--MelonYellow),
  ),
);

// общ.базовые стили > всех эл.
%color-scheme-base {
  @include adaptiv-val("padding", 7, 3);
  @include adaptiv-font(18, 8);
  border: 1px solid #bd0000;
  border-radius: var(--sz1);
  transition:
    background-color 200ms linear,
    border-color 200ms linear,
    transform 100ms linear,
    color 200ms linear;
  user-select: none;
  cursor: pointer;
}

// примен.цв.схемы ч/з цикл
@each $type, $colors in $color-schemes {
  .#{"colsch-" + $type}--eg {
    // примен.общ.базовые стили
    @extend %color-scheme-base;
    // вкл.цв.шаблона/карты
    @include color-scheme(
      map.get($colors, bg),
      map.get($colors, hover-bg),
      map.get($colors, border),
      map.get($colors, hover-border),
      map.get($colors, text),
      map.get($colors, hover-text)
    );
  }
}

// расширение экранов
@mixin media-all($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: 479px) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: 480px) and (max-width: 767px) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: 768px) and (max-width: 991px) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: 992px) and (max-width: 1199px) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: 1200px) and (max-width: 1399px) {
      @content;
    }
  } @else if $breakpoint == xxl {
    @media (min-width: 1400px) {
      @content;
    }
  }
  // доп. (до 991, 991-1399)
  @else if $breakpoint == xsmd {
    @media (max-width: 991px) {
      @content;
    }
  } @else if $breakpoint == lgxl {
    @media (min-width: 992px) and (max-width: 1399px) {
      @content;
    }
  }
}
// 320px — 479px — мобильные устройства; xs
// 480px — 767px — планшеты, iPad; sm
// 768px — 991px — планшеты, iPad; md
// 992px — 1199px — небольшие экраны, ноутбуки; lg
// 1200px — 1399px — настольные компьютеры, большие экраны; xl
// 1400px и больше — очень большие экраны, ТВ. xxl
