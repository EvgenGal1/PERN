# ^ CI/CD > автоматизация развертывания и тестов
# Настройте непрерывную интеграцию и доставку (CI/CD) для автоматизации развертывания и тестов.
# файл конфигурации, который управляет тем, как ваш проект будет собираться и тестироваться в автоматическом режиме
# CI (Continuous Integration) — Практика, при которой разработчики регулярно интегрируют изменения в проект. Каждый раз после коммита запускаются сборки и тесты.
# CD (Continuous Delivery/Continuous Deployment) — Автоматизация развертывания приложения. В случае Continuous Delivery приложение подготавливается для продакшена, а при Continuous Deployment — автоматически разворачивается.

# Как и когда отработает CI/CD для данного кода. CI/CD (непрерывная интеграция и непрерывная доставка) будет работать следующим образом:
#    Событие: CI/CD процесс начинается, когда происходит одно из событий, указанных в вашем .github/workflows/nodejs-ci.yml. Это может быть push или pull_request в ветку main.
#    Этап сборки:
#       Checkout кода: Действие actions/checkout@v2 извлекает весь ваш код из репозитория и помещает его в среду выполнения GitHub Actions.
#       Настройка Node.js: Действие actions/setup-node@v2 устанавливает указанную версию Node.js, чтобы дальнейшие команды использовали именно ее.
#    Установка зависимостей:
#       Скорее всего, в вашем коде есть файл package.json, в котором указаны зависимости. Команда npm install устанавливает все эти зависимости, чтобы приложение могло работать.
#       Сборка приложения: Ваша команда npm run build (если такая есть) выполняет сборку для проекта, если у вас есть соответствующая команда в package.json.
#    Тестирование:
#       Команда npm test запускает тесты вашего приложения. GitHub Actions будет проверять, что тесты проходят успешно. Если один из тестов не проходит, процесс CI/CD завершится с ошибкой, а код не будет внедрен.
#    Деплой (при необходимости): Если тесты прошли успешно, вы можете указать шаги для развертывания, например, на облачном сервере или другом хостинге. Это значительно упрощает процесс развертывания.
# Таким образом, CI/CD помогает вам автоматически собирать, тестировать и развертывать ваш код, что повышает надежность и снижает вероятность ошибок, связанных с ручным развертыванием.

name: Node.js CI # имя процесса CI

# on запуск раб.процесс. Раб.при push/pull в ветку main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# описание задачи
jobs:
  build:
    # выполн.в среде Ubuntu последней версии
    runs-on: ubuntu-latest

    # выполн.шаги, которые будут выполняться. actions/checkout@v2 позволяет загружать код вашего репозитория, чтобы последующие шаги могли с ним работать.
    # actions/setup-node@v2 устанавливает Node.js, а команда npm install устанавливает все зависимости вашего проекта.
    steps:
      # шаг извлечен.кода из репозитория
      - name: Checkout code
      - uses: actions/checkout@v2

      # устан.NodeJS версии 20
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      # устан.всех зависимостей проекта
      - name: Install dependencies
        run: npm install

      # запуск сборки
      - name: Run build
      - run: npm run build

      # запуск тестов
      - name: Run tests
      - run: npm test

      # устан.среды развертывания хостинга/сервиса
      - name: Setup Environment
        run: |
          echo "Настройка среды для развертывания."

      # кмд.развертывания хостинга/сервиса
      - name: Deploy
        run: |
          echo "Развертывание приложения..."
